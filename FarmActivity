package com.example.refactor.activities

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.refactor.R
import com.example.refactor.models.FormData
import com.example.refactor.network.ApiClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import retrofit2.HttpException
import java.io.IOException
import kotlin.math.pow

class FormActivity : AppCompatActivity() {

    private lateinit var etMobileNumber: EditText
    private lateinit var etMPin: EditText
    private lateinit var btnNextForm: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_form)

        etMobileNumber = findViewById(R.id.etMobileNumber)
        etMPin = findViewById(R.id.etMPin)
        btnNextForm = findViewById(R.id.btnProceed)

        btnNextForm.setOnClickListener {
            val mobileNumber = etMobileNumber.text.toString().trim()
            val mPin = etMPin.text.toString().trim()

            if (validateInputs(mobileNumber, mPin)) {
                submitFormData(mobileNumber, mPin)
            }
        }
    }

    private fun validateInputs(mobileNumber: String, mPin: String): Boolean {
        val mobileRegex = "^[6-9]\\d{9}$".toRegex()
        val mPinRegex = "^\\d{6}$".toRegex()

        if (!mobileRegex.matches(mobileNumber)) {
            showToast("Invalid Mobile Number!")
            return false
        }

        if (!mPinRegex.matches(mPin)) {
            showToast("Invalid MPIN!")
            return false
        }

        return true
    }

    private fun submitFormData(mobileNumber: String, mPin: String) {
        val apiInterface = ApiClient.api
        val formData = FormData(mobile = mobileNumber, mPin = mPin)

        runOnUiThread {
            showToast("Processing...")
        }

        CoroutineScope(Dispatchers.IO).launch {
            var attempt = 0
            var success = false

            while (attempt < 3 && !success) {
                try {
                    val response = apiInterface.saveFormDataStep1(formData)
                    withContext(Dispatchers.Main) {
                        if (response.isSuccessful && response.body()?.success == true) {
                            val userId = response.body()?.data?.userId
                            Log.d("FormActivity", "User ID received")
                            handleUserId(userId)
                            success = true  // Mark success to exit retry loop
                        } else {
                            Log.e("FormActivity", "Submission failed")
                        }
                    }
                } catch (e: HttpException) {
                    Log.e("FormActivity", "HTTP Exception", e)
                } catch (e: IOException) {
                    Log.e("FormActivity", "Network Error", e)
                } catch (e: Exception) {
                    Log.e("FormActivity", "Unexpected Error", e)
                }
                attempt++
                if (!success) delay((2.0.pow(attempt) * 1000).toLong())  // Apply delay for retry
            }

            if (!success) {
                withContext(Dispatchers.Main) {
                    showToast("Please check your internet connection!")
                }
            }
        }
    }

    private fun handleUserId(userId: String?) {
        if (!userId.isNullOrEmpty()) {
            saveUserIdToSharedPreferences(userId)
            showToast("Data submitted successfully!")
            navigateToNextForm(userId)
        } else {
            showToast("Data submission failed!")
        }
    }

    private fun saveUserIdToSharedPreferences(userId: String) {
        val sharedPref = getSharedPreferences("UserPreferences", Context.MODE_PRIVATE)
        val editor = sharedPref.edit()
        editor.putString("userId", userId)
        editor.apply()
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    private fun navigateToNextForm(userId: String) {
        val intent = Intent(this, PaymentActivity::class.java)
        intent.putExtra("USER_ID", userId)
        startActivity(intent)
        finish()
    }
}
